<?php

namespace Tests\Feature\Services;

use App\Services\DataTransferObjects\SequenceActionData;
use App\Services\DataTransferObjects\SequenceData;
use App\Services\SequenceService;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class SequenceServiceTest extends TestCase
{
    protected SequenceService $service;

    public function setUp(): void {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->service = app(SequenceService::class);
    }

    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function test_that_a_sequence_can_be_created()
    {
        /** @var SequenceData $sequenceData */
        $sequenceData = SequenceData::factory()->make();

        $sequenceActions = SequenceActionData::factory()->count(10)->make();
        $ordinalPosition = 1;

        foreach ($sequenceActions as $sequenceAction) {
            $sequenceAction->ordinal_position = $ordinalPosition;
            $ordinalPosition++;
        }

        $sequenceData->sequence_actions = $sequenceActions;

        $this->service->createSequence($sequenceData);
    }
}
