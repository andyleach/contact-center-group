<?php

namespace Tests\Feature\Services;

use App\Models\Sequence\Sequence;
use App\Services\DataTransferObjects\SequenceActionData;
use App\Services\DataTransferObjects\SequenceData;
use App\Services\SequenceService;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class SequenceServiceTest extends TestCase
{
    use RefreshDatabase;

    protected SequenceService $service;

    public function setUp(): void {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->service = app(SequenceService::class);
    }

    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function test_that_a_sequence_can_be_created()
    {
        /** @var SequenceData $sequenceData */
        $sequenceData = SequenceData::factory()->make();

        $sequenceActions = SequenceActionData::factory()->count(10)->make();
        $ordinalPosition = 1;

        foreach ($sequenceActions as $sequenceAction) {
            $sequenceAction->ordinal_position = $ordinalPosition;
            $ordinalPosition++;
        }

        $sequenceData->sequence_actions = $sequenceActions;

        $sequence = $this->service->createSequence($sequenceData);
        $this->assertInstanceOf(Sequence::class, $sequence);
        $this->assertDatabaseHas('sequences', [
            'label' => $sequenceData->label,
            'description' => $sequenceData->description,
            'cost_per_lead_in_usd' => $sequenceData->cost_per_lead_in_usd,
            'client_id' => $sequenceData->client_id,
        ]);

        $this->assertTrue($sequenceActions->count() == $sequence->sequenceActions->count());
    }

    public function test_that_a_sequence_can_be_updated()
    {
        /** @var Sequence $sequence */
        $sequence = Sequence::factory()->create();
        /** @var SequenceData $sequenceData */
        $sequenceData = SequenceData::factory()->make();
        $sequenceData->sequence_actions = $sequence->sequenceActions;

        $sequence = $this->service->updateSequence($sequence, $sequenceData);
        $this->assertInstanceOf(Sequence::class, $sequence);
        $this->assertDatabaseHas('sequences', [
            'id' => $sequence->id,
            'label' => $sequenceData->label,
            'description' => $sequenceData->description,
            'cost_per_lead_in_usd' => $sequenceData->cost_per_lead_in_usd,
            'client_id' => $sequence->client_id,
        ]);

        // TODO: Write tests that handle cases a sequence action was disabled
    }

    public function test_that_a_sequence_action_can_be_updated_or_created() {
        $sequence = Sequence::factory()->create();
    }
}
