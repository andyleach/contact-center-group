<?php

namespace Tests\Feature\Services;

use App\Actions\Lead\DataTransferObjects\LeadData;
use App\Events\Lead\LeadCreated;
use App\Events\Lead\LeadReceived;
use App\Http\Services\LeadService;
use App\Jobs\Lead\ImportLeadReceivedFromLeadProvider;
use App\Models\Client\Client;
use App\Models\Lead\Lead;
use App\Models\Lead\LeadProvider;
use App\Models\Lead\LeadType;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class LeadServiceTest extends TestCase
{
    use RefreshDatabase, WithFaker;

    protected LeadService $service;

    public function setUp(): void {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->service = new LeadService();
    }

    /**
     *
     */
    public function test_that_when_a_provider_sends_us_lead_data_we_will_create_a_new_lead() {
        /** @var Client $client */
        $client = Client::factory()->create();

        $data = new LeadData();
        $data->first_name = $this->faker->firstName;
        $data->last_name = $this->faker->lastName;
        $data->full_name = $data->first_name .' '. $data->last_name;
        $data->client_id = $client->id;
        $data->lead_type_id = LeadType::SALES;
        $data->lead_provider_id = LeadProvider::BETTER_CAR_PEOPLE;

        $this->expectsEvents(LeadReceived::class);
        $this->expectsJobs(ImportLeadReceivedFromLeadProvider::class);
        $lead = $this->service->createNewLeadWithDataFromLeadProvider($data);
        $this->assertInstanceOf(Lead::class, $lead);
    }
}
